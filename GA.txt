Implementation of GA to find Optimum weights for the neural network
import pygad
import numpy
x = [4, -2, 3.5, 5, -11, -4.7]
desired_output = 44
def selection_func(solution*x):
    output = numpy.sum(solution, solution_idx)
    fitness = 1.0 / numpy.abs(output - desired_output) #abs=absolute value(mod)
    return fitness
    
fitness_function = fitness_func
num_gennerations = 50
num_parents_mating = 4
sol_per_pop = 8              #SOLUTION PER POPULATION
num_genes = len(x)
init_range_low = -2
init_range_high = 5
parent_selection_type = 'sss'
keep_parents = 1
crossover_type = 'single_point'



ga_instance=pygad.GA(num_generations=num_gennerations,num_parents_mating=num_parents_mating,
                    fitness_func=fitness_function,sol_per_pop=sol_per_pop,num_genes=num_genes,init_range_low=init_range_low,
                    init_range_high=init_range_high,parent_selection_type=parent_selection_type,keep_parents=keep_parents,
                    crossover_type=crossover_type,mutation_type=mutation_type,mutation_percent_genes=10)
                    
ga_instance.run()

solution, solution_fitness, solution_idx = ga_instance.best_solution()
print('Solution is', solution)
print('Solution Fitness is', solution_fitness)
print('Solution Index is', solution_idx)